/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Multicall, MulticallInterface } from "../../extension/Multicall";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610834806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ac9650d814610030575b600080fd5b61004a6004803603810190610045919061035f565b610060565b6040516100579190610507565b60405180910390f35b60608282905067ffffffffffffffff81111561007f5761007e610529565b5b6040519080825280602002602001820160405280156100b257816020015b606081526020019060019003908161009d5790505b50905060005b8383905081101561016557610134308585848181106100da576100d9610558565b5b90506020028101906100ec9190610596565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061016c565b82828151811061014757610146610558565b5b6020026020010181905250808061015d90610632565b9150506100b8565b5092915050565b606061019183836040518060600160405280602781526020016107d860279139610199565b905092915050565b60606101a484610266565b6101e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da906106fe565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161020b919061075a565b600060405180830381855af49150503d8060008114610246576040519150601f19603f3d011682016040523d82523d6000602084013e61024b565b606091505b509150915061025b828286610289565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610299578290506102e9565b6000835111156102ac5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e091906107b5565b60405180910390fd5b9392505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261031f5761031e6102fa565b5b8235905067ffffffffffffffff81111561033c5761033b6102ff565b5b60208301915083602082028301111561035857610357610304565b5b9250929050565b60008060208385031215610376576103756102f0565b5b600083013567ffffffffffffffff811115610394576103936102f5565b5b6103a085828601610309565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104125780820151818401526020810190506103f7565b83811115610421576000848401525b50505050565b6000601f19601f8301169050919050565b6000610443826103d8565b61044d81856103e3565b935061045d8185602086016103f4565b61046681610427565b840191505092915050565b600061047d8383610438565b905092915050565b6000602082019050919050565b600061049d826103ac565b6104a781856103b7565b9350836020820285016104b9856103c8565b8060005b858110156104f557848403895281516104d68582610471565b94506104e183610485565b925060208a019950506001810190506104bd565b50829750879550505050505092915050565b600060208201905081810360008301526105218184610492565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126105b3576105b2610587565b5b80840192508235915067ffffffffffffffff8211156105d5576105d461058c565b5b6020830192506001820236038313156105f1576105f0610591565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600061063d82610628565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156106705761066f6105f9565b5b600182019050919050565b600082825260208201905092915050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b60006106e860268361067b565b91506106f38261068c565b604082019050919050565b60006020820190508181036000830152610717816106db565b9050919050565b600081905092915050565b6000610734826103d8565b61073e818561071e565b935061074e8185602086016103f4565b80840191505092915050565b60006107668284610729565b915081905092915050565b600081519050919050565b600061078782610771565b610791818561067b565b93506107a18185602086016103f4565b6107aa81610427565b840191505092915050565b600060208201905081810360008301526107cf818461077c565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201b30d78780d5a8b8464181b35ec81b1836699ff5f5405b44a8aae0857fea12ec64736f6c634300080c0033";

type MulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall__factory extends ContractFactory {
  constructor(...args: MulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  override connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
